# -*- coding: utf-8 -*-
"""breast cancer classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uaiixliG60dJR5hR6mMP4s6vVNFE4lb2
"""



"""logistic regression model
importing dependencies
"""

import numpy as np
import pandas as pd
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#data collection and processing

#loading data from sklearn
breast_cancer_dataset = sklearn.datasets.load_breast_cancer()

print(breast_cancer_dataset)

#loading the data to a dataframe
data_frame = pd.DataFrame(breast_cancer_dataset.data, columns = breast_cancer_dataset.feature_names)

#print 5 rows
data_frame.head()

#adding the target coloumn to dataframe
data_frame['label'] = breast_cancer_dataset.target

#printing last 5 rows
data_frame.tail()

# number of rows and coloumns in a dataset
data_frame.shape

# getting some information about the data
data_frame.info()

# checking for missing values
data_frame.isnull().sum()

# statistical measures about the data
data_frame.describe()

# checking the distribution of target variable
data_frame['label'].value_counts()

"""1 --> Benign
0 -->Malignant
"""

data_frame.groupby('label').mean()

# splitting input featrues and target
x = data_frame.drop(columns='label',axis=1)
y = data_frame['label']

print(x)

print(y)

# splitting the data into training and testing data
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2, random_state=2)

print(x.shape,x_train.shape,x_test.shape)

#model training
# logistic regression is useful for binary classification
model = LogisticRegression()

# training the logistic Regression model using training data
model.fit(x_train , y_train)

# evaluaaing the model
# accuracy on model data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(y_train,x_train_prediction)

print('Accuracy on training data =',training_data_accuracy)

#accuracy on test data
x_test_prediction = model.predict(x_test)
testing_data_accuracy = accuracy_score(y_test,x_test_prediction)
print('Accuracy on testing data =',testing_data_accuracy)

#Building a predecive system
input_data = (11.42,20.38,77.58,386.1,0.1425,0.2839,0.2414,0.1052,0.2597,0.09744,0.4956,1.156,3.445,27.23,0.00911,0.07458,0.05661,0.01867,0.05963,0.009208,14.91,26.5,98.87,567.7,0.2098,0.8663,0.6869,0.2575,0.6638,0.173)
# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)
# reshape the numpy array as we are predecting for one datapoint
input_data_reshape = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshape)
print(prediction)

if(prediction[0] == 0):
  print('The breast cancer is Malignant')

else:
  print('The breast Cancer is Benign')



